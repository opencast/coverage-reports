memberSearchIndex = [{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"addEvent(Date, Date, String, Set<String>, MediaPackage, Map<String, String>, Map<String, String>, Optional<String>)","u":"addEvent(java.util.Date,java.util.Date,java.lang.String,java.util.Set,org.opencastproject.mediapackage.MediaPackage,java.util.Map,java.util.Map,java.util.Optional)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"addMultipleEvents(RRule, Date, Date, Long, TimeZone, String, Set<String>, MediaPackage, Map<String, String>, Map<String, String>, Optional<String>)","u":"addMultipleEvents(net.fortuna.ical4j.model.property.RRule,java.util.Date,java.util.Date,java.lang.Long,java.util.TimeZone,java.lang.String,java.util.Set,org.opencastproject.mediapackage.MediaPackage,java.util.Map,java.util.Map,java.util.Optional)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"findConflictingEvents(String, Date, Date)","u":"findConflictingEvents(java.lang.String,java.util.Date,java.util.Date)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"findConflictingEvents(String, RRule, Date, Date, long, TimeZone)","u":"findConflictingEvents(java.lang.String,net.fortuna.ical4j.model.property.RRule,java.util.Date,java.util.Date,long,java.util.TimeZone)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getCalendar(Optional<String>, Optional<String>, Optional<Date>)","u":"getCalendar(java.util.Optional,java.util.Optional,java.util.Optional)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getCaptureAgentConfiguration(String)","u":"getCaptureAgentConfiguration(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getCurrentRecording(String)","u":"getCurrentRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getDublinCore(String)","u":"getDublinCore(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getEventCount()"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getKnownRecordings()"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getMediaPackage(String)","u":"getMediaPackage(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getRecordingState(String)","u":"getRecordingState(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getScheduleLastModified(String)","u":"getScheduleLastModified(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getTechnicalMetadata(String)","u":"getTechnicalMetadata(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getUpcomingRecording(String)","u":"getUpcomingRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"getWorkflowConfig(String)","u":"getWorkflowConfig(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"removeEvent(String)","u":"removeEvent(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"removeRecording(String)","u":"removeRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"removeScheduledRecordingsBeforeBuffer(long)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"SchedulerServiceRemoteImpl()","u":"%3Cinit%3E()"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"search(Optional<String>, Optional<Date>, Optional<Date>, Optional<Date>, Optional<Date>)","u":"search(java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"setRemoteServiceManager(ServiceRegistry)","u":"setRemoteServiceManager(org.opencastproject.serviceregistry.api.ServiceRegistry)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"setTrustedHttpClient(TrustedHttpClient)","u":"setTrustedHttpClient(org.opencastproject.security.api.TrustedHttpClient)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"updateEvent(String, Optional<Date>, Optional<Date>, Optional<String>, Optional<Set<String>>, Optional<MediaPackage>, Optional<Map<String, String>>, Optional<Map<String, String>>)","u":"updateEvent(java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"updateEvent(String, Optional<Date>, Optional<Date>, Optional<String>, Optional<Set<String>>, Optional<MediaPackage>, Optional<Map<String, String>>, Optional<Map<String, String>>, boolean)","u":"updateEvent(java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,boolean)"},{"p":"org.opencastproject.scheduler.remote","c":"SchedulerServiceRemoteImpl","l":"updateRecordingState(String, String)","u":"updateRecordingState(java.lang.String,java.lang.String)"}];updateSearchResults();