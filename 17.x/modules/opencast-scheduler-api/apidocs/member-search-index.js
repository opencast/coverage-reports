memberSearchIndex = [{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"addEvent(Date, Date, String, Set<String>, MediaPackage, Map<String, String>, Map<String, String>, Opt<String>)","u":"addEvent(java.util.Date,java.util.Date,java.lang.String,java.util.Set,org.opencastproject.mediapackage.MediaPackage,java.util.Map,java.util.Map,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"addMultipleEvents(RRule, Date, Date, Long, TimeZone, String, Set<String>, MediaPackage, Map<String, String>, Map<String, String>, Opt<String>)","u":"addMultipleEvents(net.fortuna.ical4j.model.property.RRule,java.util.Date,java.util.Date,java.lang.Long,java.util.TimeZone,java.lang.String,java.util.Set,org.opencastproject.mediapackage.MediaPackage,java.util.Map,java.util.Map,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"Util","l":"adjustRrule(RRule, Date, TimeZone)","u":"adjustRrule(net.fortuna.ical4j.model.property.RRule,java.util.Date,java.util.TimeZone)"},{"p":"org.opencastproject.scheduler.api","c":"Util","l":"calculatePeriods(Calendar, Calendar, long, Recur, TimeZone)","u":"calculatePeriods(java.util.Calendar,java.util.Calendar,long,net.fortuna.ical4j.model.Recur,java.util.TimeZone)"},{"p":"org.opencastproject.scheduler.api","c":"Util","l":"calculatePeriods(Date, Date, long, RRule, TimeZone)","u":"calculatePeriods(java.util.Date,java.util.Date,long,net.fortuna.ical4j.model.property.RRule,java.util.TimeZone)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"CAPTURE_ERROR"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"CAPTURE_FINISHED"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"CAPTURING"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"COMPRESSING"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"COMPRESSING_ERROR"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"equals(Object)","u":"equals(java.lang.Object)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerConflictException","l":"ERROR_CODE"},{"p":"org.opencastproject.scheduler.api","c":"Util","l":"EVENT_MINIMUM_SEPARATION_MILLISECONDS"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"findConflictingEvents(String, Date, Date)","u":"findConflictingEvents(java.lang.String,java.util.Date,java.util.Date)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"findConflictingEvents(String, RRule, Date, Date, long, TimeZone)","u":"findConflictingEvents(java.lang.String,net.fortuna.ical4j.model.property.RRule,java.util.Date,java.util.Date,long,java.util.TimeZone)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getAgentId()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getAgentId()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getCalendar(Opt<String>, Opt<String>, Opt<Date>)","u":"getCalendar(com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getCaptureAgentConfiguration()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getCaptureAgentConfiguration()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getCaptureAgentConfiguration(String)","u":"getCaptureAgentConfiguration(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"getComment()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getCurrentRecording(String)","u":"getCurrentRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getDublinCore(String)","u":"getDublinCore(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"getEnd()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getEndDate()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getEndDate()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerConflictException","l":"getErrorCode()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getEventCount()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerEvent","l":"getEventId()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getEventId()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getEventId()"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"getId()"},{"p":"org.opencastproject.scheduler.api","c":"Recording","l":"getID()"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"getID()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getKnownRecordings()"},{"p":"org.opencastproject.scheduler.api","c":"Recording","l":"getLastCheckinTime()"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"getLastCheckinTime()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerEvent","l":"getMediaPackage()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getMediaPackage(String)","u":"getMediaPackage(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getPresenters()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getPresenters()"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"getPurpose()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getRecording()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getRecording()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getRecordingState(String)","u":"getRecordingState(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getScheduleLastModified(String)","u":"getScheduleLastModified(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"getStart()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getStartDate()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getStartDate()"},{"p":"org.opencastproject.scheduler.api","c":"Recording","l":"getState()"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"getState()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerEvent","l":"getTechnicalMetadata()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getTechnicalMetadata(String)","u":"getTechnicalMetadata(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getUpcomingRecording(String)","u":"getUpcomingRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerEvent","l":"getVersion()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"getWorkflowConfig(String)","u":"getWorkflowConfig(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadata","l":"getWorkflowProperties()"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"getWorkflowProperties()"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"hashCode()"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"JOB_TYPE"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"KNOWN_STATES"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"MANIFEST"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"MANIFEST_ERROR"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"MANIFEST_FINISHED"},{"p":"org.opencastproject.scheduler.api","c":"Period","l":"Period(Option<Long>, Date, Date, Option<String>, Option<String>)","u":"%3Cinit%3E(org.opencastproject.util.data.Option,java.util.Date,java.util.Date,org.opencastproject.util.data.Option,org.opencastproject.util.data.Option)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"RecordingImpl(String, String)","u":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"RecordingImpl(String, String, long)","u":"%3Cinit%3E(java.lang.String,java.lang.String,long)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"removeEvent(String)","u":"removeEvent(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"removeRecording(String)","u":"removeRecording(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"removeScheduledRecordingsBeforeBuffer(long)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerConflictException","l":"SchedulerConflictException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerConflictException","l":"SchedulerConflictException(String, Throwable)","u":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerConflictException","l":"SchedulerConflictException(Throwable)","u":"%3Cinit%3E(java.lang.Throwable)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerException","l":"SchedulerException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerException","l":"SchedulerException(String, Throwable)","u":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerException","l":"SchedulerException(Throwable)","u":"%3Cinit%3E(java.lang.Throwable)"},{"p":"org.opencastproject.scheduler.api","c":"Util","l":"schedulingIntervalsOverlap(Date, Date, Date, Date)","u":"schedulingIntervalsOverlap(java.util.Date,java.util.Date,java.util.Date,java.util.Date)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"search(Opt<String>, Opt<Date>, Opt<Date>, Opt<Date>, Opt<Date>)","u":"search(com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setAgentId(String)","u":"setAgentId(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setCaptureAgentConfiguration(Map<String, String>)","u":"setCaptureAgentConfiguration(java.util.Map)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setEndDate(Date)","u":"setEndDate(java.util.Date)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setEventId(String)","u":"setEventId(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setPresenters(Set<String>)","u":"setPresenters(java.util.Set)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setRecording(Opt<Recording>)","u":"setRecording(com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setStartDate(Date)","u":"setStartDate(java.util.Date)"},{"p":"org.opencastproject.scheduler.api","c":"Recording","l":"setState(String)","u":"setState(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingImpl","l":"setState(String)","u":"setState(java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"setWorkflowProperties(Map<String, String>)","u":"setWorkflowProperties(java.util.Map)"},{"p":"org.opencastproject.scheduler.api","c":"TechnicalMetadataImpl","l":"TechnicalMetadataImpl(String, String, Date, Date, Set<String>, Map<String, String>, Map<String, String>, Opt<Recording>)","u":"%3Cinit%3E(java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Set,java.util.Map,java.util.Map,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"UNKNOWN"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"updateEvent(String, Opt<Date>, Opt<Date>, Opt<String>, Opt<Set<String>>, Opt<MediaPackage>, Opt<Map<String, String>>, Opt<Map<String, String>>)","u":"updateEvent(java.lang.String,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"updateEvent(String, Opt<Date>, Opt<Date>, Opt<String>, Opt<Set<String>>, Opt<MediaPackage>, Opt<Map<String, String>>, Opt<Map<String, String>>, boolean)","u":"updateEvent(java.lang.String,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,com.entwinemedia.fn.data.Opt,boolean)"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"updateRecordingState(String, String)","u":"updateRecordingState(java.lang.String,java.lang.String)"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"UPLOAD_ERROR"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"UPLOAD_FINISHED"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"UPLOADING"},{"p":"org.opencastproject.scheduler.api","c":"SchedulerService","l":"WORKFLOW_CONFIG_PREFIX"},{"p":"org.opencastproject.scheduler.api","c":"RecordingState","l":"WORKFLOW_IGNORE_STATES"}];updateSearchResults();